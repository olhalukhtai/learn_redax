{"ast":null,"code":"export const loadPostAction = () => {\n  return dispatch => {\n    fetch('https://jsonplaceholder.typicode.com/posts').then(resp => resp.json()).then(posts => dispatch({\n      type: \"LOAD_POST\",\n      payload: posts\n    }));\n  };\n};\n/*\nexport const loadPostAction =() =>{\n    return(dispatch)=>{\n        async function getPost(){\n            const resp=await fetch (\"https://jsonplaceholder.typicode.com/posts\")\n            const posts=await resp.json()\n            return posts\n        }\n        const posts=getPost()\n\n        .then(posts=>\n            dispatch({type:\"LOAD_POST\",payload:posts}))\n        \n    }\n}*/\n\n/*\nconst filterSortedPosts = useMemo(() => {\n    return sortedPosts.filter((sortedPost) =>\n        sortedPost.title.startsWith(filter.query)\n    );\n}, [sortedPosts, filter.query]);*/\n\n/*\n//c постоянным перезапросом всех постов и работает на добюавлнение одного поста\nexport const  addPostAction =(title,body,userId=1,id=1)=>{\n    return(dispatch)=>{\n        async function getPost(){\n            const resp=await fetch (\"https://jsonplaceholder.typicode.com/posts\")\n            const posts=await resp.json()\n            return posts\n        }\n        const posts=getPost()\n\n        .then(posts=>\n            dispatch({type:\"LOAD_POST\",payload:[...posts,{title,body,userId,id}]}))\n        //добавляется только 1 и перезапиывает этот 1 пост\n\n    }\n}\n*/\n\n/*\nexport const deletePostAction = (title) => {\n    return(dispatch)=>{\n        async function getPost(){\n            const resp=await fetch (\"https://jsonplaceholder.typicode.com/posts\")\n            const posts=await resp.json()\n            return posts\n        }\n        const posts=getPost()\n        .then(posts=>{\n            console.log(posts)\n            console.log(title)//то что ввожу в поле\n            const filterPosts=[...posts].filter(p=>!p.title.startsWith(title))    \n            console.log(filterPosts)    \n            dispatch({type:\"LOAD_POST\",payload:filterPosts})\n        })\n        //по моей логике удаляется один пост из всех постов. но сами посты не перезаписываются. и при следующем удалении опять есть все посты-элементы и удаляется один\n\n      \n        //            const filterPosts=[...posts].filter(p=>p.title.startsWith(title)!=title)        \n\n        \n        \n    }\n}*/\n\nexport const deletePostAction = title => {\n  dispatch({\n    type: \"DELETE_POST\",\n    payload: title\n  });\n};","map":{"version":3,"names":["loadPostAction","dispatch","fetch","then","resp","json","posts","type","payload","deletePostAction","title"],"sources":["/Users/olgaluhtaj/Desktop/react_modul/src/store/actions/postAction.js"],"sourcesContent":["\nexport const loadPostAction = () => {\n    return (dispatch) => {\n        fetch('https://jsonplaceholder.typicode.com/posts')\n        .then(resp => resp.json())\n        .then(posts => dispatch({type:\"LOAD_POST\",payload:posts}))\n    }\n}\n/*\nexport const loadPostAction =() =>{\n    return(dispatch)=>{\n        async function getPost(){\n            const resp=await fetch (\"https://jsonplaceholder.typicode.com/posts\")\n            const posts=await resp.json()\n            return posts\n        }\n        const posts=getPost()\n\n        .then(posts=>\n            dispatch({type:\"LOAD_POST\",payload:posts}))\n        \n    }\n}*/\n\n/*\nconst filterSortedPosts = useMemo(() => {\n    return sortedPosts.filter((sortedPost) =>\n        sortedPost.title.startsWith(filter.query)\n    );\n}, [sortedPosts, filter.query]);*/\n\n/*\n//c постоянным перезапросом всех постов и работает на добюавлнение одного поста\nexport const  addPostAction =(title,body,userId=1,id=1)=>{\n    return(dispatch)=>{\n        async function getPost(){\n            const resp=await fetch (\"https://jsonplaceholder.typicode.com/posts\")\n            const posts=await resp.json()\n            return posts\n        }\n        const posts=getPost()\n\n        .then(posts=>\n            dispatch({type:\"LOAD_POST\",payload:[...posts,{title,body,userId,id}]}))\n        //добавляется только 1 и перезапиывает этот 1 пост\n\n    }\n}\n*/\n\n/*\nexport const deletePostAction = (title) => {\n    return(dispatch)=>{\n        async function getPost(){\n            const resp=await fetch (\"https://jsonplaceholder.typicode.com/posts\")\n            const posts=await resp.json()\n            return posts\n        }\n        const posts=getPost()\n        .then(posts=>{\n            console.log(posts)\n            console.log(title)//то что ввожу в поле\n            const filterPosts=[...posts].filter(p=>!p.title.startsWith(title))    \n            console.log(filterPosts)    \n            dispatch({type:\"LOAD_POST\",payload:filterPosts})\n        })\n        //по моей логике удаляется один пост из всех постов. но сами посты не перезаписываются. и при следующем удалении опять есть все посты-элементы и удаляется один\n\n      \n        //            const filterPosts=[...posts].filter(p=>p.title.startsWith(title)!=title)        \n\n        \n        \n    }\n}*/\n\n\nexport const deletePostAction = (title) => {\n\n    dispatch({type:\"DELETE_POST\",payload:title})\n\n}"],"mappings":"AACA,OAAO,MAAMA,cAAc,GAAG,MAAM;EAChC,OAAQC,QAAQ,IAAK;IACjBC,KAAK,CAAC,4CAA4C,CAAC,CAClDC,IAAI,CAACC,IAAI,IAAIA,IAAI,CAACC,IAAI,EAAE,CAAC,CACzBF,IAAI,CAACG,KAAK,IAAIL,QAAQ,CAAC;MAACM,IAAI,EAAC,WAAW;MAACC,OAAO,EAACF;IAAK,CAAC,CAAC,CAAC;EAC9D,CAAC;AACL,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA,OAAO,MAAMG,gBAAgB,GAAIC,KAAK,IAAK;EAEvCT,QAAQ,CAAC;IAACM,IAAI,EAAC,aAAa;IAACC,OAAO,EAACE;EAAK,CAAC,CAAC;AAEhD,CAAC"},"metadata":{},"sourceType":"module"}