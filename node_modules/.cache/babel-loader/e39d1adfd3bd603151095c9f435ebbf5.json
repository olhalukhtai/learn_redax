{"ast":null,"code":"import { CommentService } from \"../../API/PostService\";\nexport const loadCommAction = (posts, title) => {\n  let idPost;\n  return dispatch => {\n    posts.find(post => {\n      if (post.title == title) {\n        console.log(post);\n        console.log(post.id);\n        idPost = post.id;\n      }\n    });\n    async function getComment(id) {\n      const comments = await CommentService.getAll(id);\n      return comments;\n    }\n    const comments = getComment(idPost);\n    console.log(comments);\n    comments.then(comments => dispatch({\n      type: \"LOAD_COMM\",\n      payload: comments\n    }));\n  };\n};\nexport const addCommAction = function (posts, body, email, name, titlePost) {\n  let id = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : 0;\n  let postId = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : 0;\n  let idPost;\n  posts.find(post => {\n    if (post.title == titlePost) {\n      idPost = post.id;\n    }\n  });\n  return {\n    type: \"ADD_COMM\",\n    payload: {\n      body,\n      email,\n      name,\n      titlePost,\n      id,\n      postId\n    }\n  };\n};","map":{"version":3,"names":["CommentService","loadCommAction","posts","title","idPost","dispatch","find","post","console","log","id","getComment","comments","getAll","then","type","payload","addCommAction","body","email","name","titlePost","postId"],"sources":["/Users/olgaluhtaj/Desktop/learn_redux_/src/store/actions/commAction.js"],"sourcesContent":["import { CommentService } from \"../../API/PostService\"\n\n\nexport const loadCommAction =(posts,title) =>{\n    let idPost\n\n    return(dispatch)=>{\n\n        posts.find(post => {if(post.title==title){\n            console.log(post)\n            console.log(post.id)\n            idPost=post.id\n        }\n        })\n        \n        async function getComment(id){\n            const comments=await CommentService.getAll(id)\n            return comments\n        }\n\n        const comments=getComment(idPost)\n        console.log(comments)\n        comments.then(comments=>\n            dispatch({type:\"LOAD_COMM\",payload:comments}))\n        \n    }\n}\n\nexport const addCommAction =(posts,body,email,name,titlePost,id=0,postId=0,) =>{\n    let idPost\n    posts.find(post => {if(post.title==titlePost){\n        idPost=post.id\n    }\n    })\n    \nreturn ({type:\"ADD_COMM\",payload:{body,email,name,titlePost,id,postId}})\n    \n}\n\n\n\n\n\n\n"],"mappings":"AAAA,SAASA,cAAc,QAAQ,uBAAuB;AAGtD,OAAO,MAAMC,cAAc,GAAE,CAACC,KAAK,EAACC,KAAK,KAAI;EACzC,IAAIC,MAAM;EAEV,OAAOC,QAAQ,IAAG;IAEdH,KAAK,CAACI,IAAI,CAACC,IAAI,IAAI;MAAC,IAAGA,IAAI,CAACJ,KAAK,IAAEA,KAAK,EAAC;QACrCK,OAAO,CAACC,GAAG,CAACF,IAAI,CAAC;QACjBC,OAAO,CAACC,GAAG,CAACF,IAAI,CAACG,EAAE,CAAC;QACpBN,MAAM,GAACG,IAAI,CAACG,EAAE;MAClB;IACA,CAAC,CAAC;IAEF,eAAeC,UAAU,CAACD,EAAE,EAAC;MACzB,MAAME,QAAQ,GAAC,MAAMZ,cAAc,CAACa,MAAM,CAACH,EAAE,CAAC;MAC9C,OAAOE,QAAQ;IACnB;IAEA,MAAMA,QAAQ,GAACD,UAAU,CAACP,MAAM,CAAC;IACjCI,OAAO,CAACC,GAAG,CAACG,QAAQ,CAAC;IACrBA,QAAQ,CAACE,IAAI,CAACF,QAAQ,IAClBP,QAAQ,CAAC;MAACU,IAAI,EAAC,WAAW;MAACC,OAAO,EAACJ;IAAQ,CAAC,CAAC,CAAC;EAEtD,CAAC;AACL,CAAC;AAED,OAAO,MAAMK,aAAa,GAAE,UAACf,KAAK,EAACgB,IAAI,EAACC,KAAK,EAACC,IAAI,EAACC,SAAS,EAAmB;EAAA,IAAlBX,EAAE,uEAAC,CAAC;EAAA,IAACY,MAAM,uEAAC,CAAC;EACtE,IAAIlB,MAAM;EACVF,KAAK,CAACI,IAAI,CAACC,IAAI,IAAI;IAAC,IAAGA,IAAI,CAACJ,KAAK,IAAEkB,SAAS,EAAC;MACzCjB,MAAM,GAACG,IAAI,CAACG,EAAE;IAClB;EACA,CAAC,CAAC;EAEN,OAAQ;IAACK,IAAI,EAAC,UAAU;IAACC,OAAO,EAAC;MAACE,IAAI;MAACC,KAAK;MAACC,IAAI;MAACC,SAAS;MAACX,EAAE;MAACY;IAAM;EAAC,CAAC;AAEvE,CAAC"},"metadata":{},"sourceType":"module"}