{"ast":null,"code":"import { CommentService } from \"../../API/PostService\";\n\n/*\n///корректный вариант//НО! все  комменты ко всем постам\nexport const loadCommAction =() =>{\n    return(dispatch)=>{\n        async function getComment(){// иногда сразу async  getComment()\n            const resp=await fetch (\"https://jsonplaceholder.typicode.com/comments\")//axios.get\n            const comments=await resp.json()\n            return comments\n        }\n        const comments=getComment()\n        console.log(comments)\n        comments.then(comments=>\n            dispatch({type:\"LOAD_COMM\",payload:comments}))\n        \n    }\n}\n*/\n//////////\n\nexport const loadCommAction = (posts, title) => {\n  let idPost;\n  return dispatch => {\n    //Найти ид\n    posts.forEach(post => {\n      if (post.title == title) {\n        console.log(post);\n        console.log(post.id);\n        idPost = post.id;\n      }\n    });\n    async function getComment(id) {\n      const comments = await CommentService.getAll(id);\n      return comments;\n    }\n    //? провести соответствие, что title поста соответсвует idPost  \n    //и принирмать title а передавать  в getComment(idPost) уже\n    const comments = getComment(idPost);\n    console.log(comments);\n    comments.then(comments => dispatch({\n      type: \"LOAD_COMM\",\n      payload: comments\n    }));\n  };\n};\nexport const addCommAction = function (body, email, name, title) {\n  let id = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 0;\n  let postId = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : 0;\n  //? к какому посту title\n  return {\n    type: \"ADD_COMM\",\n    payload: {\n      body,\n      email,\n      name,\n      title,\n      id,\n      postId\n    }\n  };\n};","map":{"version":3,"names":["CommentService","loadCommAction","posts","title","idPost","dispatch","forEach","post","console","log","id","getComment","comments","getAll","then","type","payload","addCommAction","body","email","name","postId"],"sources":["/Users/olgaluhtaj/Desktop/react_modul/src/store/actions/commAction.js"],"sourcesContent":["\nimport { CommentService } from \"../../API/PostService\"\n\n\n\n/*\n///корректный вариант//НО! все  комменты ко всем постам\nexport const loadCommAction =() =>{\n    return(dispatch)=>{\n        async function getComment(){// иногда сразу async  getComment()\n            const resp=await fetch (\"https://jsonplaceholder.typicode.com/comments\")//axios.get\n            const comments=await resp.json()\n            return comments\n        }\n        const comments=getComment()\n        console.log(comments)\n        comments.then(comments=>\n            dispatch({type:\"LOAD_COMM\",payload:comments}))\n        \n    }\n}\n*/\n//////////\n\n\n\nexport const loadCommAction =(posts,title) =>{\n    let idPost\n\n    return(dispatch)=>{\n        //Найти ид\n        posts.forEach(post => {if(post.title==title){\n            console.log(post)\n            console.log(post.id)\n            idPost=post.id\n        }\n        })\n        \n        async function getComment(id){\n            const comments=await CommentService.getAll(id)\n            return comments\n        }\n        //? провести соответствие, что title поста соответсвует idPost  \n        //и принирмать title а передавать  в getComment(idPost) уже\n        const comments=getComment(idPost)\n        console.log(comments)\n        comments.then(comments=>\n            dispatch({type:\"LOAD_COMM\",payload:comments}))\n        \n    }\n}\n\n\nexport const addCommAction =(body,email,name,title,id=0,postId=0,) =>{\n    //? к какому посту title\nreturn ({type:\"ADD_COMM\",payload:{body,email,name,title,id,postId}})\n    \n}\n\n\n\n"],"mappings":"AACA,SAASA,cAAc,QAAQ,uBAAuB;;AAItD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAIA,OAAO,MAAMC,cAAc,GAAE,CAACC,KAAK,EAACC,KAAK,KAAI;EACzC,IAAIC,MAAM;EAEV,OAAOC,QAAQ,IAAG;IACd;IACAH,KAAK,CAACI,OAAO,CAACC,IAAI,IAAI;MAAC,IAAGA,IAAI,CAACJ,KAAK,IAAEA,KAAK,EAAC;QACxCK,OAAO,CAACC,GAAG,CAACF,IAAI,CAAC;QACjBC,OAAO,CAACC,GAAG,CAACF,IAAI,CAACG,EAAE,CAAC;QACpBN,MAAM,GAACG,IAAI,CAACG,EAAE;MAClB;IACA,CAAC,CAAC;IAEF,eAAeC,UAAU,CAACD,EAAE,EAAC;MACzB,MAAME,QAAQ,GAAC,MAAMZ,cAAc,CAACa,MAAM,CAACH,EAAE,CAAC;MAC9C,OAAOE,QAAQ;IACnB;IACA;IACA;IACA,MAAMA,QAAQ,GAACD,UAAU,CAACP,MAAM,CAAC;IACjCI,OAAO,CAACC,GAAG,CAACG,QAAQ,CAAC;IACrBA,QAAQ,CAACE,IAAI,CAACF,QAAQ,IAClBP,QAAQ,CAAC;MAACU,IAAI,EAAC,WAAW;MAACC,OAAO,EAACJ;IAAQ,CAAC,CAAC,CAAC;EAEtD,CAAC;AACL,CAAC;AAGD,OAAO,MAAMK,aAAa,GAAE,UAACC,IAAI,EAACC,KAAK,EAACC,IAAI,EAACjB,KAAK,EAAmB;EAAA,IAAlBO,EAAE,uEAAC,CAAC;EAAA,IAACW,MAAM,uEAAC,CAAC;EAC5D;EACJ,OAAQ;IAACN,IAAI,EAAC,UAAU;IAACC,OAAO,EAAC;MAACE,IAAI;MAACC,KAAK;MAACC,IAAI;MAACjB,KAAK;MAACO,EAAE;MAACW;IAAM;EAAC,CAAC;AAEnE,CAAC"},"metadata":{},"sourceType":"module"}