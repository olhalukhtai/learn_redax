{"ast":null,"code":"export const loadPostAction = () => {\n  return dispatch => {\n    fetch('https://jsonplaceholder.typicode.com/posts').then(resp => resp.json()).then(posts => dispatch({\n      type: \"LOAD_POST\",\n      payload: posts\n    }));\n  };\n};\n/*\nexport const loadPostAction =() =>{\n    return(dispatch)=>{\n        async function getPost(){\n            const resp=await fetch (\"https://jsonplaceholder.typicode.com/posts\")\n            const posts=await resp.json()\n            return posts\n        }\n        const posts=getPost()\n\n        .then(posts=>\n            dispatch({type:\"LOAD_POST\",payload:posts}))\n        \n    }\n}*/\n\n/*\nconst filterSortedPosts = useMemo(() => {\n    return sortedPosts.filter((sortedPost) =>\n        sortedPost.title.startsWith(filter.query)\n    );\n}, [sortedPosts, filter.query]);*/\n\nexport const addPostAction = function (title, body) {\n  let userId = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1;\n  let id = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 1;\n  return dispatch => {\n    async function getPost() {\n      const resp = await fetch(\"https://jsonplaceholder.typicode.com/posts\");\n      const posts = await resp.json();\n      return posts;\n    }\n    const posts = getPost().then(posts => dispatch({\n      type: \"LOAD_POST\",\n      payload: [...posts, {\n        title,\n        body,\n        userId,\n        id\n      }]\n    }));\n    //добавляется только 1 и перезапиывает этот 1 пост\n  };\n};\n\nexport const deletePostAction = title => {\n  return dispatch => {\n    async function getPost() {\n      const resp = await fetch(\"https://jsonplaceholder.typicode.com/posts\");\n      const posts = await resp.json();\n      return posts;\n    }\n    const posts = getPost().then(posts => {\n      console.log(posts);\n      console.log(title); //то что ввожу в поле\n      const filterPosts = [...posts].filter(p => p.title.startsWith(title));\n      console.log(filterPosts);\n      dispatch({\n        type: \"LOAD_POST\",\n        payload: filterPosts\n      });\n    });\n    //по моей логике удаляется один пост из всех постов. но сами посты не перезаписываются. и при следующем удалении опять есть все посты-элементы и удаляется один\n\n    //            const filterPosts=[...posts].filter(p=>p.title.startsWith(title)!=title)        \n\n    //state.post.posts.filter((post) =>\n    //\tpost.title.startsWith(titleArticle)\n    //);\n  };\n};\n\nexport const changePostAction = () => {};","map":{"version":3,"names":["loadPostAction","dispatch","fetch","then","resp","json","posts","type","payload","addPostAction","title","body","userId","id","getPost","deletePostAction","console","log","filterPosts","filter","p","startsWith","changePostAction"],"sources":["/Users/olgaluhtaj/Desktop/react_modul/src/store/actions/postAction.js"],"sourcesContent":["\nexport const loadPostAction = () => {\n    return (dispatch) => {\n        fetch('https://jsonplaceholder.typicode.com/posts')\n        .then(resp => resp.json())\n        .then(posts => dispatch({type:\"LOAD_POST\",payload:posts}))\n    }\n}\n/*\nexport const loadPostAction =() =>{\n    return(dispatch)=>{\n        async function getPost(){\n            const resp=await fetch (\"https://jsonplaceholder.typicode.com/posts\")\n            const posts=await resp.json()\n            return posts\n        }\n        const posts=getPost()\n\n        .then(posts=>\n            dispatch({type:\"LOAD_POST\",payload:posts}))\n        \n    }\n}*/\n\n/*\nconst filterSortedPosts = useMemo(() => {\n    return sortedPosts.filter((sortedPost) =>\n        sortedPost.title.startsWith(filter.query)\n    );\n}, [sortedPosts, filter.query]);*/\n\nexport const  addPostAction =(title,body,userId=1,id=1)=>{\n    return(dispatch)=>{\n        async function getPost(){\n            const resp=await fetch (\"https://jsonplaceholder.typicode.com/posts\")\n            const posts=await resp.json()\n            return posts\n        }\n        const posts=getPost()\n\n        .then(posts=>\n            dispatch({type:\"LOAD_POST\",payload:[...posts,{title,body,userId,id}]}))\n        //добавляется только 1 и перезапиывает этот 1 пост\n\n    }\n}\n\n\n\nexport const deletePostAction = (title) => {\n    return(dispatch)=>{\n        async function getPost(){\n            const resp=await fetch (\"https://jsonplaceholder.typicode.com/posts\")\n            const posts=await resp.json()\n            return posts\n        }\n        const posts=getPost()\n        .then(posts=>{\n            console.log(posts)\n            console.log(title)//то что ввожу в поле\n            const filterPosts=[...posts].filter(p=>p.title.startsWith(title))    \n            console.log(filterPosts)    \n            dispatch({type:\"LOAD_POST\",payload:filterPosts})\n        })\n        //по моей логике удаляется один пост из всех постов. но сами посты не перезаписываются. и при следующем удалении опять есть все посты-элементы и удаляется один\n\n      \n        //            const filterPosts=[...posts].filter(p=>p.title.startsWith(title)!=title)        \n\n        \n        //state.post.posts.filter((post) =>\n\t\t//\tpost.title.startsWith(titleArticle)\n\t\t//);\n        \n    }\n}\n\nexport const changePostAction =()=>{\n    \n}\n"],"mappings":"AACA,OAAO,MAAMA,cAAc,GAAG,MAAM;EAChC,OAAQC,QAAQ,IAAK;IACjBC,KAAK,CAAC,4CAA4C,CAAC,CAClDC,IAAI,CAACC,IAAI,IAAIA,IAAI,CAACC,IAAI,EAAE,CAAC,CACzBF,IAAI,CAACG,KAAK,IAAIL,QAAQ,CAAC;MAACM,IAAI,EAAC,WAAW;MAACC,OAAO,EAACF;IAAK,CAAC,CAAC,CAAC;EAC9D,CAAC;AACL,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA,OAAO,MAAOG,aAAa,GAAE,UAACC,KAAK,EAACC,IAAI,EAAiB;EAAA,IAAhBC,MAAM,uEAAC,CAAC;EAAA,IAACC,EAAE,uEAAC,CAAC;EAClD,OAAOZ,QAAQ,IAAG;IACd,eAAea,OAAO,GAAE;MACpB,MAAMV,IAAI,GAAC,MAAMF,KAAK,CAAE,4CAA4C,CAAC;MACrE,MAAMI,KAAK,GAAC,MAAMF,IAAI,CAACC,IAAI,EAAE;MAC7B,OAAOC,KAAK;IAChB;IACA,MAAMA,KAAK,GAACQ,OAAO,EAAE,CAEpBX,IAAI,CAACG,KAAK,IACPL,QAAQ,CAAC;MAACM,IAAI,EAAC,WAAW;MAACC,OAAO,EAAC,CAAC,GAAGF,KAAK,EAAC;QAACI,KAAK;QAACC,IAAI;QAACC,MAAM;QAACC;MAAE,CAAC;IAAC,CAAC,CAAC,CAAC;IAC3E;EAEJ,CAAC;AACL,CAAC;;AAID,OAAO,MAAME,gBAAgB,GAAIL,KAAK,IAAK;EACvC,OAAOT,QAAQ,IAAG;IACd,eAAea,OAAO,GAAE;MACpB,MAAMV,IAAI,GAAC,MAAMF,KAAK,CAAE,4CAA4C,CAAC;MACrE,MAAMI,KAAK,GAAC,MAAMF,IAAI,CAACC,IAAI,EAAE;MAC7B,OAAOC,KAAK;IAChB;IACA,MAAMA,KAAK,GAACQ,OAAO,EAAE,CACpBX,IAAI,CAACG,KAAK,IAAE;MACTU,OAAO,CAACC,GAAG,CAACX,KAAK,CAAC;MAClBU,OAAO,CAACC,GAAG,CAACP,KAAK,CAAC;MAClB,MAAMQ,WAAW,GAAC,CAAC,GAAGZ,KAAK,CAAC,CAACa,MAAM,CAACC,CAAC,IAAEA,CAAC,CAACV,KAAK,CAACW,UAAU,CAACX,KAAK,CAAC,CAAC;MACjEM,OAAO,CAACC,GAAG,CAACC,WAAW,CAAC;MACxBjB,QAAQ,CAAC;QAACM,IAAI,EAAC,WAAW;QAACC,OAAO,EAACU;MAAW,CAAC,CAAC;IACpD,CAAC,CAAC;IACF;;IAGA;;IAGA;IACN;IACA;EAEE,CAAC;AACL,CAAC;;AAED,OAAO,MAAMI,gBAAgB,GAAE,MAAI,CAEnC,CAAC"},"metadata":{},"sourceType":"module"}